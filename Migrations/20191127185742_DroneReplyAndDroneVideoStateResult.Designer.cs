// <auto-generated />
using System;
using DroHub.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DroHub.Data.Migrations
{
    [DbContext(typeof(DroHubContext))]
    [Migration("20191127185742_DroneReplyAndDroneVideoStateResult")]
    partial class DroneReplyAndDroneVideoStateResult
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity("DroHub.Areas.DHub.Models.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Apperture");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("DropboxConnectState")
                        .HasMaxLength(32);

                    b.Property<string>("DropboxToken");

                    b.Property<string>("FocusMode");

                    b.Property<string>("ISO");

                    b.Property<string>("LiveVideoFMTProfile");

                    b.Property<int>("LiveVideoPt");

                    b.Property<string>("LiveVideoRTPMap");

                    b.Property<string>("LiveVideoRTPUrl");

                    b.Property<string>("LiveVideoSecret");

                    b.Property<string>("Name");

                    b.Property<string>("SerialNumber")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("SerialNumber")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("DroHub.Areas.DHub.Models.LogEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("EventId");

                    b.Property<string>("Exception");

                    b.Property<string>("Level")
                        .IsRequired();

                    b.Property<string>("Message")
                        .IsRequired();

                    b.Property<string>("SourceContext")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("Timestamp");

                    b.HasKey("Id");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("DroHub.Areas.Identity.Data.DroHubUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("ConnectState")
                        .HasMaxLength(32);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("DropboxToken");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<DateTime>("LastLogin");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("DroneBatteryLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("BatteryLevelPercent");

                    b.Property<string>("Serial")
                        .IsRequired();

                    b.Property<long>("Timestamp");

                    b.HasKey("Id");

                    b.HasIndex("Serial");

                    b.ToTable("DroneBatteryLevels");
                });

            modelBuilder.Entity("DroneFlyingState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Serial")
                        .IsRequired();

                    b.Property<int>("State");

                    b.Property<long>("Timestamp");

                    b.HasKey("Id");

                    b.HasIndex("Serial");

                    b.ToTable("DroneFlyingStates");
                });

            modelBuilder.Entity("DronePosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Altitude");

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<string>("Serial")
                        .IsRequired();

                    b.Property<long>("Timestamp");

                    b.HasKey("Id");

                    b.HasIndex("Serial");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("DroneRadioSignal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Rssi");

                    b.Property<string>("Serial")
                        .IsRequired();

                    b.Property<double>("SignalQuality");

                    b.Property<long>("Timestamp");

                    b.HasKey("Id");

                    b.HasIndex("Serial");

                    b.ToTable("DroneRadioSignals");
                });

            modelBuilder.Entity("DroneReply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ActionName");

                    b.Property<bool>("Result");

                    b.Property<string>("Serial")
                        .IsRequired();

                    b.Property<long>("Timestamp");

                    b.HasKey("Id");

                    b.HasIndex("Serial");

                    b.ToTable("DroneReplies");
                });

            modelBuilder.Entity("DroneVideoStateResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("HumanMessage");

                    b.Property<string>("RtpUrl");

                    b.Property<string>("Serial")
                        .IsRequired();

                    b.Property<int>("State");

                    b.Property<long>("Timestamp");

                    b.HasKey("Id");

                    b.HasIndex("Serial");

                    b.ToTable("DroneVideoStatesResults");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DroHub.Areas.DHub.Models.Device", b =>
                {
                    b.HasOne("DroHub.Areas.Identity.Data.DroHubUser", "User")
                        .WithMany("Devices")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("DroneBatteryLevel", b =>
                {
                    b.HasOne("DroHub.Areas.DHub.Models.Device", "Device")
                        .WithMany("battery_levels")
                        .HasForeignKey("Serial")
                        .HasPrincipalKey("SerialNumber")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DroneFlyingState", b =>
                {
                    b.HasOne("DroHub.Areas.DHub.Models.Device", "Device")
                        .WithMany("flying_states")
                        .HasForeignKey("Serial")
                        .HasPrincipalKey("SerialNumber")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DronePosition", b =>
                {
                    b.HasOne("DroHub.Areas.DHub.Models.Device", "Device")
                        .WithMany("positions")
                        .HasForeignKey("Serial")
                        .HasPrincipalKey("SerialNumber")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DroneRadioSignal", b =>
                {
                    b.HasOne("DroHub.Areas.DHub.Models.Device", "Device")
                        .WithMany("radio_signals")
                        .HasForeignKey("Serial")
                        .HasPrincipalKey("SerialNumber")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DroneReply", b =>
                {
                    b.HasOne("DroHub.Areas.DHub.Models.Device", "Device")
                        .WithMany("drone_replies")
                        .HasForeignKey("Serial")
                        .HasPrincipalKey("SerialNumber")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DroneVideoStateResult", b =>
                {
                    b.HasOne("DroHub.Areas.DHub.Models.Device", "Device")
                        .WithMany("drone_video_states")
                        .HasForeignKey("Serial")
                        .HasPrincipalKey("SerialNumber")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DroHub.Areas.Identity.Data.DroHubUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DroHub.Areas.Identity.Data.DroHubUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DroHub.Areas.Identity.Data.DroHubUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DroHub.Areas.Identity.Data.DroHubUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
