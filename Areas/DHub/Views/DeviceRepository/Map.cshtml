@{
    ViewData["Title"] = "MapDashboard";
}
<!-- Content Header (Page header) -->
<!-- Main content -->

<section class="content">
    <style>
        .container-fluid {
            width:100%;
            height: 100%;
            position:absolute;
            top:0;
            padding:0;
        }

        #map {
            width:100%;
            height: 100%;
            position:absolute;
            top:0;
            padding:0;
        }
        .gm-style .gm-style-iw {
            color: #FFFFFF;
            background-color: #3C61AD !important;
            top: 0 !important;
            left: 0 !important;
            padding-top: 10px;
            display: block !important;
        }

        .gm-style .gm-style-iw #google-popup p{
            padding: 10px;
        }
        /*style the link*/
        .gm-style div div div div div div div div a {
            color: #f1f1f1;
            font-weight: bold;
        }

    </style>
    <div class="container-fluid">
        <div id="map" ></div>
        <script src="/lib/dropbox-sdk/Dropbox-sdk.min.js"></script>
    </div>
</section>

@section Scripts {
    <script src="/lib/dropbox-sdk/Dropbox-sdk.min.js"></script>
    <script src="/lib/signalr/dist/browser/signalr.js"></script>
    <script src="/js/common-dropbox.js"></script>
    <script>
            function getCoordinate(file, coord_type) {
                    if (typeof(file.media_info.metadata.location) != 'undefined')
                        return eval("file.media_info.metadata.location." + coord_type)
            }

            function isPictureFile(file_response) {
                return !(file_response[".tag"] != "file" || typeof(file_response.media_info) === 'undefined' ||
                            file_response.media_info[".tag"] != 'metadata' ||
                            file_response.media_info.metadata[".tag"] != 'photo' ||
                            file_response.media_info.metadata["location"] === undefined)
            }

            function JSONMarkerPrettyPrint(name, val) {
                return `<p>${name}: ${val}</p>`
            }

            function generateInfoWindowContent(file, thumbnail_url, exif_json) {
                let contentString = `<div id="google-popup-${file.id}">
                    <p>Pic ${file.name}</p>
                    <p>Lat:${getCoordinate(file, 'latitude')} Long ${getCoordinate(file, 'longitude')}</p>`

                if (thumbnail_url)
                    contentString += `<img src="${thumbnail_url}">`

                if (exif_json) {
                    JSON.parse(exif_json, function(k, v) {
                        contentString += JSONMarkerPrettyPrint(k, v)
                    })
                }
                contentString +=  "</div>";
                return contentString;
            }

            function populateExifInfo(dbx, file, infowindow) {
                json_file = file.path_lower.substr(0, file.path_lower.lastIndexOf(".")) + ".json"
                dbx.filesDownload({path: json_file}).then(
                    function (json_response) {
                        let blob = json_response.fileBlob;
                        let reader = new FileReader();
                        reader.addEventListener("loadend", function() {
                            let photo_exif = JSON.parse(reader.result, JSONMarkerPrettyPrint);
                            stringified_exif = ""
                            infowindow.setContent(generateInfoWindowContent(file, thumbnail_url, reader.result));
                        })
                        reader.readAsText(blob);
                    }
                )
            }

            function populateThumbnail(file, dbx, infowindow, after_thumbnail_callback) {
                dbx.filesGetThumbnail({path: file.path_lower, size : {".tag": 'w480h320'}}).then(function (thumbnail_response) {
                    thumbnail_url = window.URL.createObjectURL(thumbnail_response.fileBlob)
                    infowindow.setContent(generateInfoWindowContent(file, thumbnail_url, null))
                    after_thumbnail_callback(dbx, file, infowindow)
                })
            }

            async function populateMarkerContentDropbox(dbx, file, infowindow, marker) {
                infowindow.close()
                console.log(`marker-id = marker-${file.id}`)
                infowindow.setContent(generateInfoWindowContent(file, null, null))
                infowindow.open(map, marker);
                populateThumbnail(file, dbx, infowindow, populateExifInfo)
            }

            function populateMarkers(map, latitude, longitude, marker_icon, marker_content_func) {
                let marker = new google.maps.Marker({
                        position: {lat: latitude, lng: longitude},
                        icon : marker_icon,
                        map : map
                });
                if (marker_content_func) {
                    google.maps.event.addListener(marker, 'click', () => {
                        marker_content_func.bind(null, marker)();
                    });
                }
            }
            function initLiveTelemetry(map) {
                var connection = new signalR.HubConnectionBuilder().withUrl("/telemetryHub").
                    configureLogging(signalR.LogLevel.Information).build();

                connection.on("telemetry", function (message) {
                    drone_coords = JSON.parse(message)
                    let icon_url =  `${window.location.origin}/images/drone-svgrepo-com.svg`
                    let marker_icon = {
                        url: icon_url, // url
                        scaledSize: new google.maps.Size(50, 50), // scaled size
                        origin: new google.maps.Point(0,0), // origin
                        anchor: new google.maps.Point(0, 0) // anchorscaledSize: new google.maps.Size(50, 50), // scaled size
                    }

                    populate_marker_cb = populateMarkers.bind(null, map, drone_coords.Latitude, drone_coords.Longitude, marker_icon)
                    populate_marker_cb()
                });

                connection.start().then(function () {
                    console.log("Notifications started SIGNALR");
                }).catch(function (err) {
                    return console.error(err.toString());
                });

            }
            function initMap() {
                var map = new google.maps.Map(document.getElementById('map'), {
                    zoom: 10,
                    center: {lat: 40.5, lng: -7}
                    });

                var url = '@Url.Action("GetDevicesList", "Devices", new {Area = "DHub"})'


                let infowindow = new google.maps.InfoWindow();
                initLiveTelemetry(map);
                $.getJSON(url)
                .done(function (device_list) {
                    $.each(device_list, function (i, device) {
                        if (device.dropboxToken === undefined)
                            return;

                        var dbx = new Dropbox.Dropbox({ accessToken: device.dropboxToken, fetch: fetch})
                        getFolders(dbx, `/${device.serialNumber}`, (folder_entry) => {
                            console.log( folder_entry["path_lower"])
                            getFile(dbx, folder_entry["path_lower"], (file) => {
                                    let latitude = getCoordinate(file, 'latitude')
                                    let longitude = getCoordinate(file, 'longitude')
                                    let content_cb = populateMarkerContentDropbox.bind(null, dbx, file, infowindow);
                                    let icon_url =  `${window.location.origin}/images/map-hand-drawn-paper-svgrepo-com.svg`
                                    let marker_icon = {
                                        url: icon_url, // url
                                        scaledSize: new google.maps.Size(50, 50), // scaled size
                                        origin: new google.maps.Point(0,0), // origin
                                        anchor: new google.maps.Point(0, 0) // anchorscaledSize: new google.maps.Size(50, 50), // scaled size
                                            }
                                    console.log(marker_icon)
                                    let populate_cb = populateMarkers.bind(null, map, latitude, longitude, marker_icon, content_cb);
                                    populate_cb()
                                }
                             )
                        })
                    })
                })
                .fail(function () {
                    console.log("Received bad json")
                })
        }
        </script>
        <script async defer src="https://maps.googleapis.com/maps/api/js?callback=initMap"></script>
}