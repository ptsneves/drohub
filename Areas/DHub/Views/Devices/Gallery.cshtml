@using Dropbox.Api.Files

@model DroHub.Areas.DHub.Models.Device
@{
    ViewData["Title"] = "Gallery";
    string dropbox_device_token = ViewData["UserToken"] as string;
}
<!-- Content Header (Page header) -->
<section class="content-header">
    <h1>
        Devices
        <small>Gallery</small>
    </h1>
    <ol class="breadcrumb">
        <li><a asp-area="DHub" asp-controller="Devices" asp-action="" title="Back to devices list"><i class="fa fa-camera"></i> Devices</a></li>
        <li class="active">Gallery</li>
    </ol>
</section>
<!-- /Content Header (Page header) -->
<!-- Main content -->
<section class="content">
      <div class="row">
        <div class="col-xs-12">
            <div class="box">
                <div class="box-header">
                    <div class="nav-tabs-custom">
                        <ul class="nav nav-tabs">
                            <li role="presentation">
                                <a asp-area="DHub" asp-controller="Devices" asp-route-id="@Model.Id" asp-action="Camera" title="View device camera">Camera</a>
                            </li>
                            <li role="presentation" class="active">
                                <a href="#">Gallery</a>
                            </li>
                            <li role="presentation">
                                <a asp-area="DHub" asp-controller="Devices" asp-route-id="@Model.Id" asp-action="Data" title="View device data">Data</a>
                            </li>
                            <li class="pull-right header">
                                <input type="submit" class="pull-right btn btn-sm btn-danger" value="Disconnect repository"
                                       form="disconnect-form" />
                            </li>
                        </ul>
                    </div>
                </div>
                <div class="col-md-4" id="dropbox-widget-container">
                    <div class="box box-widget widget-user-2" style="display: none;" id="dropbox-widget-folder">
                        <!-- Add the bg color to the header using any of the bg-* classes -->
                        <div class="widget-user-header lightlue" id="sdad">
                        <div class="widget-user-image">
                            <img class="img-circle" src="../dist/img/user7-128x128.jpg">
                        </div>
                        <!-- /.widget-user-image -->
                        <h3 class="widget-user-username">l</h3>
                        <h5 class="widget-user-desc"></h5>
                        </div>
                        <div class="box-footer no-padding">
                        <ul class="nav nav-stacked">
                            <li><a href="#" id="folder-gallery-link"><h3 id="session-name">Session 1</h3></a></li>
                            <li><a href="#">Pictures Available <span class="pull-right badge bg-aqua" id="folder-pic-count">N</span></a></li>
                            <li><a href="#" id="session-date">Session date</a></li>
                        </ul>
                        </div>
                    </div>
                </div>
                <div class="box-body" id="gallery-table-container">
                    <table class="table table-bordered table-hover ui-helper-center" style="display: none;" id="dropbox-data-table">
                        <thead>
                            <tr>
                                <th>Thumbnail</th>
                                <th>Latitude</th>
                                <th>Longiture</th>
                                <th>DateTime</th>
                                <th>File</th>
                                <th>Size (bytes)</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody id="gallery-table-body">
                            <!-- tr -->
                        </tbody>
                    </table>
                </div>
                <div class="box-footer">
                    <a asp-area="DHub" asp-controller="Devices" asp-action="" class="btn btn-primary" title="Back to devices list">Back to list</a>
                </div>
            </div>
        </div>
    </div>
</section>
<!-- /Main content -->
@using (Html.BeginForm("Disconnect", "DeviceRepository", new { id = @Model.Id }, FormMethod.Post, true, new { id = "disconnect-form" }))
{
    @Html.AntiForgeryToken();
}
@section Scripts {
    @if (!String.IsNullOrEmpty(dropbox_device_token)) {
        <script src="/lib/dropbox-sdk/Dropbox-sdk.min.js"></script>
        <script>
            function getCoordinate(file, coord_type) {
                    if (typeof(file.media_info.metadata.location) != 'undefined')
                        return eval("file.media_info.metadata.location." + coord_type)
            }


            function isPictureFile(file_response) {
                return !(file_response[".tag"] != "file" || typeof(file_response.media_info) === 'undefined' ||
                            file_response.media_info[".tag"] != 'metadata' ||
                            file_response.media_info.metadata[".tag"] != 'photo')
            }

            var dbx = new Dropbox.Dropbox({ accessToken: '@dropbox_device_token', fetch: fetch});
            console.log('dbx', dbx)
            displayFoldersGallery()

            function displayFoldersGallery() {
                 dbx.filesListFolder({path: ''})
                .then(function(response) {
                    populateFoldersGrid(response.entries);
                })
                .catch(function(error) {
                    console.error(error);
                });
            }

            function displayFileGallery(path) {
                dbx.filesListFolder({"path": path, include_media_info : true})
                .then(function(response) {
                    populatePicturesTable(response.entries);
                })
                .catch(function(error) {
                    console.error(error);
                });
            }

            async function populateFoldersGrid(folders) {

                for (var i = 0; i < folders.length; i++) {
                    var first_pic_response = null
                    if (folders[i][".tag"] != "folder") {
                        continue;
                    }
                    var files = {}
                    if (first_pic_response == null && folders[i]["path_lower"] != null) {
                        subdir_resp = await dbx.filesListFolder({path : folders[i]["path_lower"], include_media_info : true})
                        files = subdir_resp.entries
                        for(var j = 0; j < files.length; j++) {
                            if (isPictureFile(files[j])) {
                                first_pic_response = files[j]
                                break
                            }
                        }

                    }
                    var folder_ui = $('#dropbox-widget-folder').clone()
                    folder_ui = folder_ui.attr("style", "display=initial")
                    folder_ui = folder_ui.attr("id", `dropbox-widget-folder_ui-${i}`)

                    var folder_ui_thumbnail = folder_ui.children('.widget-user-header')
                    var thumbnail_response = await dbx.filesGetThumbnail({path: first_pic_response.path_lower, size : {".tag": 'w480h320'}})
                    thumbnail_url = window.URL.createObjectURL(thumbnail_response.fileBlob)

                    folder_ui_thumbnail.attr("id", `folder-widget-${i}`)
                    folder_ui_thumbnail.attr("style",  `background: url(${thumbnail_url}) center center;`)

                    var session_name = folder_ui.find('#session-name')
                    session_name.attr("id", `session-name-${i}`)
                    session_name.text(first_pic_response.name)

                    var session_date = folder_ui.find('#session-date')
                    session_date.attr("id", `session-date-${i}`)
                    session_date.text(first_pic_response.media_info.metadata.time_taken)

                    var folder_pic_count = folder_ui.find('#folder-pic-count')
                    folder_pic_count.attr("id", `folder-pic-count-${i}`)
                    folder_pic_count.text(files.length)

                    var folder_gallery_link = folder_ui.find('#folder-gallery-link')
                    folder_gallery_link.attr("id", `folder-gallery-link-${i}`)
                    folder_gallery_link.attr("onclick", `displayFileGallery('${folders[i]["path_lower"]}')`)

                    folder_ui.appendTo('#dropbox-widget-container')
                }
            }

            function getCoordinateCell(file, coord_type) {
                    if (typeof(file.media_info.metadata.location) != 'undefined')
                        return "<td>"+ eval("file.media_info.metadata.location." + coord_type) + "</td>"
                    else
                        return "<td class='text-red'><i>"+ "Picture does not have Geographical information" + "</i></td>"
            }
            function populatePicturesTable(files) {
                var has_at_list_one_valid_picture = false
                var gallery_table = $('#dropbox-data-table').clone()
                thumbnail_path_list = []

                for (var i = 0; i < files.length; i++) {
                    if (!isPictureFile(files[i]))
                        continue;

                    gallery_table.attr("style", "display=inherit")
                    gallery_table.attr("id", "dropbox-data-table-real")

                    var row = ""
                    var thumbnail = ""
                    row += `<td id="thumbnail-${files[i].id}"></td>`
                    row += getCoordinateCell(files[i], "latitude")
                    row += getCoordinateCell(files[i], "longitude")
                    row += `<td>${files[i].media_info.metadata.time_taken}</td>`
                    row += "<td>"+ files[i].name + "</td>"
                    row += "<td>"+ files[i].size + "</td>"
                    row = "<tr>" + row + "</tr>"

                    var dropbox_data_table = gallery_table.find('#gallery-table-body')
                    dropbox_data_table.append(row)
                    has_at_list_one_valid_picture = true
                    thumbnail_path_list.push({"path" : files[i].path_lower})
                }

                if (has_at_list_one_valid_picture) {
                    gallery_table_container = $("#gallery-table-container")
                    $('#dropbox-data-table-real').remove()
                    gallery_table_container.append(gallery_table)

                    for (var i = 0; i < files.length; i++) {

                    }
                    dbx.filesGetThumbnailBatch({"entries": thumbnail_path_list}).then(function(response) {
                            entries = response["entries"]
                            for (var key in entries) {

                                if (!entries.hasOwnProperty(key))
                                    continue;

                                current_entry = entries[key]

                                if (current_entry[".tag"] == "success") {
                                    var img = document.createElement('img');

                                    img.src = `data:image/jpeg;base64, ${current_entry["thumbnail"]}`;

                                    document.getElementById("thumbnail-" + current_entry["metadata"]["id"]).appendChild(img)
                                }
                            }
                        })
                        .catch(function(error) {
                            console.log("When trying to get the thumbnail got error:");
                            console.log(error);
                        })
                }
            }
        </script>
    }
}
